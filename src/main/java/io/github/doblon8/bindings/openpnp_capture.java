// Generated by jextract

package io.github.doblon8.bindings;

import io.github.doblon8.utils.NativeLoader;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class openpnp_capture {

    openpnp_capture() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
        String traceArgs = Arrays.stream(args)
                .map(Object::toString)
                .collect(Collectors.joining(", "));
        System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
                .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP;

    static {
        SymbolLookup lookup = null;
        try {
            // Try system library first
            lookup = SymbolLookup.libraryLookup(System.mapLibraryName("openpnp-capture"), LIBRARY_ARENA)
                    .or(SymbolLookup.loaderLookup())
                    .or(Linker.nativeLinker().defaultLookup());
        } catch (Throwable t) {
            // Fallback to bundled library
            NativeLoader.loadOpenpnpCapture();
            lookup = SymbolLookup.loaderLookup()
                    .or(Linker.nativeLinker().defaultLookup());
        }
        SYMBOL_LOOKUP = lookup;
    }

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)36L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 36
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int CAPPROPID_EXPOSURE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_EXPOSURE 1
     * }
     */
    public static int CAPPROPID_EXPOSURE() {
        return CAPPROPID_EXPOSURE;
    }
    private static final int CAPPROPID_FOCUS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_FOCUS 2
     * }
     */
    public static int CAPPROPID_FOCUS() {
        return CAPPROPID_FOCUS;
    }
    private static final int CAPPROPID_ZOOM = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_ZOOM 3
     * }
     */
    public static int CAPPROPID_ZOOM() {
        return CAPPROPID_ZOOM;
    }
    private static final int CAPPROPID_WHITEBALANCE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_WHITEBALANCE 4
     * }
     */
    public static int CAPPROPID_WHITEBALANCE() {
        return CAPPROPID_WHITEBALANCE;
    }
    private static final int CAPPROPID_GAIN = (int)5L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_GAIN 5
     * }
     */
    public static int CAPPROPID_GAIN() {
        return CAPPROPID_GAIN;
    }
    private static final int CAPPROPID_BRIGHTNESS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_BRIGHTNESS 6
     * }
     */
    public static int CAPPROPID_BRIGHTNESS() {
        return CAPPROPID_BRIGHTNESS;
    }
    private static final int CAPPROPID_CONTRAST = (int)7L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_CONTRAST 7
     * }
     */
    public static int CAPPROPID_CONTRAST() {
        return CAPPROPID_CONTRAST;
    }
    private static final int CAPPROPID_SATURATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_SATURATION 8
     * }
     */
    public static int CAPPROPID_SATURATION() {
        return CAPPROPID_SATURATION;
    }
    private static final int CAPPROPID_GAMMA = (int)9L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_GAMMA 9
     * }
     */
    public static int CAPPROPID_GAMMA() {
        return CAPPROPID_GAMMA;
    }
    private static final int CAPPROPID_HUE = (int)10L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_HUE 10
     * }
     */
    public static int CAPPROPID_HUE() {
        return CAPPROPID_HUE;
    }
    private static final int CAPPROPID_SHARPNESS = (int)11L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_SHARPNESS 11
     * }
     */
    public static int CAPPROPID_SHARPNESS() {
        return CAPPROPID_SHARPNESS;
    }
    private static final int CAPPROPID_BACKLIGHTCOMP = (int)12L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_BACKLIGHTCOMP 12
     * }
     */
    public static int CAPPROPID_BACKLIGHTCOMP() {
        return CAPPROPID_BACKLIGHTCOMP;
    }
    private static final int CAPPROPID_POWERLINEFREQ = (int)13L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_POWERLINEFREQ 13
     * }
     */
    public static int CAPPROPID_POWERLINEFREQ() {
        return CAPPROPID_POWERLINEFREQ;
    }
    private static final int CAPPROPID_LAST = (int)14L;
    /**
     * {@snippet lang=c :
     * #define CAPPROPID_LAST 14
     * }
     */
    public static int CAPPROPID_LAST() {
        return CAPPROPID_LAST;
    }
    private static final int CAPRESULT_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CAPRESULT_OK 0
     * }
     */
    public static int CAPRESULT_OK() {
        return CAPRESULT_OK;
    }
    private static final int CAPRESULT_ERR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CAPRESULT_ERR 1
     * }
     */
    public static int CAPRESULT_ERR() {
        return CAPRESULT_ERR;
    }
    private static final int CAPRESULT_DEVICENOTFOUND = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CAPRESULT_DEVICENOTFOUND 2
     * }
     */
    public static int CAPRESULT_DEVICENOTFOUND() {
        return CAPRESULT_DEVICENOTFOUND;
    }
    private static final int CAPRESULT_FORMATNOTSUPPORTED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CAPRESULT_FORMATNOTSUPPORTED 3
     * }
     */
    public static int CAPRESULT_FORMATNOTSUPPORTED() {
        return CAPRESULT_FORMATNOTSUPPORTED;
    }
    private static final int CAPRESULT_PROPERTYNOTSUPPORTED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CAPRESULT_PROPERTYNOTSUPPORTED 4
     * }
     */
    public static int CAPRESULT_PROPERTYNOTSUPPORTED() {
        return CAPRESULT_PROPERTYNOTSUPPORTED;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = openpnp_capture.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = openpnp_capture.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = openpnp_capture.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = openpnp_capture.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = openpnp_capture.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef void *CapContext
     * }
     */
    public static final AddressLayout CapContext = openpnp_capture.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int32_t CapStream
     * }
     */
    public static final OfInt CapStream = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t CapResult
     * }
     */
    public static final OfInt CapResult = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t CapDeviceID
     * }
     */
    public static final OfInt CapDeviceID = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t CapFormatID
     * }
     */
    public static final OfInt CapFormatID = openpnp_capture.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t CapPropertyID
     * }
     */
    public static final OfInt CapPropertyID = openpnp_capture.C_INT;

    private static class Cap_createContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_POINTER    );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_createContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapContext Cap_createContext()
     * }
     */
    public static FunctionDescriptor Cap_createContext$descriptor() {
        return Cap_createContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapContext Cap_createContext()
     * }
     */
    public static MethodHandle Cap_createContext$handle() {
        return Cap_createContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapContext Cap_createContext()
     * }
     */
    public static MemorySegment Cap_createContext$address() {
        return Cap_createContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapContext Cap_createContext()
     * }
     */
    public static MemorySegment Cap_createContext() {
        var mh$ = Cap_createContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_createContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_releaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_releaseContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_releaseContext(CapContext ctx)
     * }
     */
    public static FunctionDescriptor Cap_releaseContext$descriptor() {
        return Cap_releaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_releaseContext(CapContext ctx)
     * }
     */
    public static MethodHandle Cap_releaseContext$handle() {
        return Cap_releaseContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_releaseContext(CapContext ctx)
     * }
     */
    public static MemorySegment Cap_releaseContext$address() {
        return Cap_releaseContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_releaseContext(CapContext ctx)
     * }
     */
    public static int Cap_releaseContext(MemorySegment ctx) {
        var mh$ = Cap_releaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_releaseContext", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getDeviceCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getDeviceCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t Cap_getDeviceCount(CapContext ctx)
     * }
     */
    public static FunctionDescriptor Cap_getDeviceCount$descriptor() {
        return Cap_getDeviceCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t Cap_getDeviceCount(CapContext ctx)
     * }
     */
    public static MethodHandle Cap_getDeviceCount$handle() {
        return Cap_getDeviceCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t Cap_getDeviceCount(CapContext ctx)
     * }
     */
    public static MemorySegment Cap_getDeviceCount$address() {
        return Cap_getDeviceCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t Cap_getDeviceCount(CapContext ctx)
     * }
     */
    public static int Cap_getDeviceCount(MemorySegment ctx) {
        var mh$ = Cap_getDeviceCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getDeviceCount", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getDeviceName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_POINTER,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getDeviceName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Cap_getDeviceName(CapContext ctx, CapDeviceID index)
     * }
     */
    public static FunctionDescriptor Cap_getDeviceName$descriptor() {
        return Cap_getDeviceName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Cap_getDeviceName(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MethodHandle Cap_getDeviceName$handle() {
        return Cap_getDeviceName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Cap_getDeviceName(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MemorySegment Cap_getDeviceName$address() {
        return Cap_getDeviceName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Cap_getDeviceName(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MemorySegment Cap_getDeviceName(MemorySegment ctx, int index) {
        var mh$ = Cap_getDeviceName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getDeviceName", ctx, index);
            }
            return (MemorySegment)mh$.invokeExact(ctx, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getDeviceUniqueID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_POINTER,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getDeviceUniqueID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Cap_getDeviceUniqueID(CapContext ctx, CapDeviceID index)
     * }
     */
    public static FunctionDescriptor Cap_getDeviceUniqueID$descriptor() {
        return Cap_getDeviceUniqueID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Cap_getDeviceUniqueID(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MethodHandle Cap_getDeviceUniqueID$handle() {
        return Cap_getDeviceUniqueID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Cap_getDeviceUniqueID(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MemorySegment Cap_getDeviceUniqueID$address() {
        return Cap_getDeviceUniqueID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Cap_getDeviceUniqueID(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MemorySegment Cap_getDeviceUniqueID(MemorySegment ctx, int index) {
        var mh$ = Cap_getDeviceUniqueID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getDeviceUniqueID", ctx, index);
            }
            return (MemorySegment)mh$.invokeExact(ctx, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getNumFormats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getNumFormats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int32_t Cap_getNumFormats(CapContext ctx, CapDeviceID index)
     * }
     */
    public static FunctionDescriptor Cap_getNumFormats$descriptor() {
        return Cap_getNumFormats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int32_t Cap_getNumFormats(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MethodHandle Cap_getNumFormats$handle() {
        return Cap_getNumFormats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int32_t Cap_getNumFormats(CapContext ctx, CapDeviceID index)
     * }
     */
    public static MemorySegment Cap_getNumFormats$address() {
        return Cap_getNumFormats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int32_t Cap_getNumFormats(CapContext ctx, CapDeviceID index)
     * }
     */
    public static int Cap_getNumFormats(MemorySegment ctx, int index) {
        var mh$ = Cap_getNumFormats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getNumFormats", ctx, index);
            }
            return (int)mh$.invokeExact(ctx, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getFormatInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getFormatInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_getFormatInfo(CapContext ctx, CapDeviceID index, CapFormatID id, CapFormatInfo *info)
     * }
     */
    public static FunctionDescriptor Cap_getFormatInfo$descriptor() {
        return Cap_getFormatInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_getFormatInfo(CapContext ctx, CapDeviceID index, CapFormatID id, CapFormatInfo *info)
     * }
     */
    public static MethodHandle Cap_getFormatInfo$handle() {
        return Cap_getFormatInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_getFormatInfo(CapContext ctx, CapDeviceID index, CapFormatID id, CapFormatInfo *info)
     * }
     */
    public static MemorySegment Cap_getFormatInfo$address() {
        return Cap_getFormatInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_getFormatInfo(CapContext ctx, CapDeviceID index, CapFormatID id, CapFormatInfo *info)
     * }
     */
    public static int Cap_getFormatInfo(MemorySegment ctx, int index, int id, MemorySegment info) {
        var mh$ = Cap_getFormatInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getFormatInfo", ctx, index, id, info);
            }
            return (int)mh$.invokeExact(ctx, index, id, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_openStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_openStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapStream Cap_openStream(CapContext ctx, CapDeviceID index, CapFormatID formatID)
     * }
     */
    public static FunctionDescriptor Cap_openStream$descriptor() {
        return Cap_openStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapStream Cap_openStream(CapContext ctx, CapDeviceID index, CapFormatID formatID)
     * }
     */
    public static MethodHandle Cap_openStream$handle() {
        return Cap_openStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapStream Cap_openStream(CapContext ctx, CapDeviceID index, CapFormatID formatID)
     * }
     */
    public static MemorySegment Cap_openStream$address() {
        return Cap_openStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapStream Cap_openStream(CapContext ctx, CapDeviceID index, CapFormatID formatID)
     * }
     */
    public static int Cap_openStream(MemorySegment ctx, int index, int formatID) {
        var mh$ = Cap_openStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_openStream", ctx, index, formatID);
            }
            return (int)mh$.invokeExact(ctx, index, formatID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_closeStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_closeStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_closeStream(CapContext ctx, CapStream stream)
     * }
     */
    public static FunctionDescriptor Cap_closeStream$descriptor() {
        return Cap_closeStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_closeStream(CapContext ctx, CapStream stream)
     * }
     */
    public static MethodHandle Cap_closeStream$handle() {
        return Cap_closeStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_closeStream(CapContext ctx, CapStream stream)
     * }
     */
    public static MemorySegment Cap_closeStream$address() {
        return Cap_closeStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_closeStream(CapContext ctx, CapStream stream)
     * }
     */
    public static int Cap_closeStream(MemorySegment ctx, int stream) {
        var mh$ = Cap_closeStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_closeStream", ctx, stream);
            }
            return (int)mh$.invokeExact(ctx, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_isOpenStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_isOpenStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t Cap_isOpenStream(CapContext ctx, CapStream stream)
     * }
     */
    public static FunctionDescriptor Cap_isOpenStream$descriptor() {
        return Cap_isOpenStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t Cap_isOpenStream(CapContext ctx, CapStream stream)
     * }
     */
    public static MethodHandle Cap_isOpenStream$handle() {
        return Cap_isOpenStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t Cap_isOpenStream(CapContext ctx, CapStream stream)
     * }
     */
    public static MemorySegment Cap_isOpenStream$address() {
        return Cap_isOpenStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t Cap_isOpenStream(CapContext ctx, CapStream stream)
     * }
     */
    public static int Cap_isOpenStream(MemorySegment ctx, int stream) {
        var mh$ = Cap_isOpenStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_isOpenStream", ctx, stream);
            }
            return (int)mh$.invokeExact(ctx, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_captureFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_captureFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_captureFrame(CapContext ctx, CapStream stream, void *RGBbufferPtr, uint32_t RGBbufferBytes)
     * }
     */
    public static FunctionDescriptor Cap_captureFrame$descriptor() {
        return Cap_captureFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_captureFrame(CapContext ctx, CapStream stream, void *RGBbufferPtr, uint32_t RGBbufferBytes)
     * }
     */
    public static MethodHandle Cap_captureFrame$handle() {
        return Cap_captureFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_captureFrame(CapContext ctx, CapStream stream, void *RGBbufferPtr, uint32_t RGBbufferBytes)
     * }
     */
    public static MemorySegment Cap_captureFrame$address() {
        return Cap_captureFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_captureFrame(CapContext ctx, CapStream stream, void *RGBbufferPtr, uint32_t RGBbufferBytes)
     * }
     */
    public static int Cap_captureFrame(MemorySegment ctx, int stream, MemorySegment RGBbufferPtr, int RGBbufferBytes) {
        var mh$ = Cap_captureFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_captureFrame", ctx, stream, RGBbufferPtr, RGBbufferBytes);
            }
            return (int)mh$.invokeExact(ctx, stream, RGBbufferPtr, RGBbufferBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_hasNewFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_hasNewFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t Cap_hasNewFrame(CapContext ctx, CapStream stream)
     * }
     */
    public static FunctionDescriptor Cap_hasNewFrame$descriptor() {
        return Cap_hasNewFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t Cap_hasNewFrame(CapContext ctx, CapStream stream)
     * }
     */
    public static MethodHandle Cap_hasNewFrame$handle() {
        return Cap_hasNewFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t Cap_hasNewFrame(CapContext ctx, CapStream stream)
     * }
     */
    public static MemorySegment Cap_hasNewFrame$address() {
        return Cap_hasNewFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t Cap_hasNewFrame(CapContext ctx, CapStream stream)
     * }
     */
    public static int Cap_hasNewFrame(MemorySegment ctx, int stream) {
        var mh$ = Cap_hasNewFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_hasNewFrame", ctx, stream);
            }
            return (int)mh$.invokeExact(ctx, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getStreamFrameCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getStreamFrameCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t Cap_getStreamFrameCount(CapContext ctx, CapStream stream)
     * }
     */
    public static FunctionDescriptor Cap_getStreamFrameCount$descriptor() {
        return Cap_getStreamFrameCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t Cap_getStreamFrameCount(CapContext ctx, CapStream stream)
     * }
     */
    public static MethodHandle Cap_getStreamFrameCount$handle() {
        return Cap_getStreamFrameCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t Cap_getStreamFrameCount(CapContext ctx, CapStream stream)
     * }
     */
    public static MemorySegment Cap_getStreamFrameCount$address() {
        return Cap_getStreamFrameCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t Cap_getStreamFrameCount(CapContext ctx, CapStream stream)
     * }
     */
    public static int Cap_getStreamFrameCount(MemorySegment ctx, int stream) {
        var mh$ = Cap_getStreamFrameCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getStreamFrameCount", ctx, stream);
            }
            return (int)mh$.invokeExact(ctx, stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getPropertyLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getPropertyLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_getPropertyLimits(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *min, int32_t *max, int *dValue)
     * }
     */
    public static FunctionDescriptor Cap_getPropertyLimits$descriptor() {
        return Cap_getPropertyLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_getPropertyLimits(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *min, int32_t *max, int *dValue)
     * }
     */
    public static MethodHandle Cap_getPropertyLimits$handle() {
        return Cap_getPropertyLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_getPropertyLimits(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *min, int32_t *max, int *dValue)
     * }
     */
    public static MemorySegment Cap_getPropertyLimits$address() {
        return Cap_getPropertyLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_getPropertyLimits(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *min, int32_t *max, int *dValue)
     * }
     */
    public static int Cap_getPropertyLimits(MemorySegment ctx, int stream, int propID, MemorySegment min, MemorySegment max, MemorySegment dValue) {
        var mh$ = Cap_getPropertyLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getPropertyLimits", ctx, stream, propID, min, max, dValue);
            }
            return (int)mh$.invokeExact(ctx, stream, propID, min, max, dValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_setProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_setProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_setProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t value)
     * }
     */
    public static FunctionDescriptor Cap_setProperty$descriptor() {
        return Cap_setProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_setProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t value)
     * }
     */
    public static MethodHandle Cap_setProperty$handle() {
        return Cap_setProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_setProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t value)
     * }
     */
    public static MemorySegment Cap_setProperty$address() {
        return Cap_setProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_setProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t value)
     * }
     */
    public static int Cap_setProperty(MemorySegment ctx, int stream, int propID, int value) {
        var mh$ = Cap_setProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_setProperty", ctx, stream, propID, value);
            }
            return (int)mh$.invokeExact(ctx, stream, propID, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_setAutoProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_setAutoProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_setAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t bOnOff)
     * }
     */
    public static FunctionDescriptor Cap_setAutoProperty$descriptor() {
        return Cap_setAutoProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_setAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t bOnOff)
     * }
     */
    public static MethodHandle Cap_setAutoProperty$handle() {
        return Cap_setAutoProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_setAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t bOnOff)
     * }
     */
    public static MemorySegment Cap_setAutoProperty$address() {
        return Cap_setAutoProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_setAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t bOnOff)
     * }
     */
    public static int Cap_setAutoProperty(MemorySegment ctx, int stream, int propID, int bOnOff) {
        var mh$ = Cap_setAutoProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_setAutoProperty", ctx, stream, propID, bOnOff);
            }
            return (int)mh$.invokeExact(ctx, stream, propID, bOnOff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_getProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *outValue)
     * }
     */
    public static FunctionDescriptor Cap_getProperty$descriptor() {
        return Cap_getProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_getProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *outValue)
     * }
     */
    public static MethodHandle Cap_getProperty$handle() {
        return Cap_getProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_getProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *outValue)
     * }
     */
    public static MemorySegment Cap_getProperty$address() {
        return Cap_getProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_getProperty(CapContext ctx, CapStream stream, CapPropertyID propID, int32_t *outValue)
     * }
     */
    public static int Cap_getProperty(MemorySegment ctx, int stream, int propID, MemorySegment outValue) {
        var mh$ = Cap_getProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getProperty", ctx, stream, propID, outValue);
            }
            return (int)mh$.invokeExact(ctx, stream, propID, outValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_getAutoProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER,
            openpnp_capture.C_INT,
            openpnp_capture.C_INT,
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getAutoProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CapResult Cap_getAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t *outValue)
     * }
     */
    public static FunctionDescriptor Cap_getAutoProperty$descriptor() {
        return Cap_getAutoProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CapResult Cap_getAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t *outValue)
     * }
     */
    public static MethodHandle Cap_getAutoProperty$handle() {
        return Cap_getAutoProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CapResult Cap_getAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t *outValue)
     * }
     */
    public static MemorySegment Cap_getAutoProperty$address() {
        return Cap_getAutoProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CapResult Cap_getAutoProperty(CapContext ctx, CapStream stream, CapPropertyID propID, uint32_t *outValue)
     * }
     */
    public static int Cap_getAutoProperty(MemorySegment ctx, int stream, int propID, MemorySegment outValue) {
        var mh$ = Cap_getAutoProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_getAutoProperty", ctx, stream, propID, outValue);
            }
            return (int)mh$.invokeExact(ctx, stream, propID, outValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_setLogLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openpnp_capture.C_INT
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_setLogLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Cap_setLogLevel(uint32_t level)
     * }
     */
    public static FunctionDescriptor Cap_setLogLevel$descriptor() {
        return Cap_setLogLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Cap_setLogLevel(uint32_t level)
     * }
     */
    public static MethodHandle Cap_setLogLevel$handle() {
        return Cap_setLogLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Cap_setLogLevel(uint32_t level)
     * }
     */
    public static MemorySegment Cap_setLogLevel$address() {
        return Cap_setLogLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Cap_setLogLevel(uint32_t level)
     * }
     */
    public static void Cap_setLogLevel(int level) {
        var mh$ = Cap_setLogLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_setLogLevel", level);
            }
            mh$.invokeExact(level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Cap_installCustomLogFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openpnp_capture.C_POINTER
        );

        public static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_installCustomLogFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Cap_installCustomLogFunction(CapCustomLogFunc logFunc)
     * }
     */
    public static FunctionDescriptor Cap_installCustomLogFunction$descriptor() {
        return Cap_installCustomLogFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Cap_installCustomLogFunction(CapCustomLogFunc logFunc)
     * }
     */
    public static MethodHandle Cap_installCustomLogFunction$handle() {
        return Cap_installCustomLogFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Cap_installCustomLogFunction(CapCustomLogFunc logFunc)
     * }
     */
    public static MemorySegment Cap_installCustomLogFunction$address() {
        return Cap_installCustomLogFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Cap_installCustomLogFunction(CapCustomLogFunc logFunc)
     * }
     */
    public static void Cap_installCustomLogFunction(MemorySegment logFunc) {
        var mh$ = Cap_installCustomLogFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Cap_installCustomLogFunction", logFunc);
            }
            mh$.invokeExact(logFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * const char *Cap_getLibraryVersion()
     * }
     */
    public static class Cap_getLibraryVersion {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openpnp_capture.C_POINTER        );
        private static final MemorySegment ADDR = openpnp_capture.findOrThrow("Cap_getLibraryVersion");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private Cap_getLibraryVersion(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * const char *Cap_getLibraryVersion()
         * }
         */
        public static Cap_getLibraryVersion makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new Cap_getLibraryVersion(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("Cap_getLibraryVersion", x0);
                }
                return (MemorySegment) spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
}

